name: Deploy to ECS (EC2 + bridge, AccessKey)

on:
  workflow_dispatch:
  push:
    branches: ['main']

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  IMAGE_TAG: ${{ github.sha }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  APIFOX_TEST_SCENE_ID: ${{ vars.APIFOX_TEST_SCENE_ID }}
  APIFOX_PROD_ENV_ID: ${{ vars.APIFOX_PROD_ENV_ID }}
  APIFOX_ACCESS_TOKEN: ${{ secrets.APIFOX_ACCESS_TOKEN }}

jobs:
  apifox_tests:
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      passed: ${{ steps.set-output.outputs.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Apifox CLI
        run: npm i -g apifox-cli@latest

      - name: Run Apifox tests (STAGING/PROD env)
        id: run-tests
        run: |
          set -e
          apifox run \
            --access-token "${APIFOX_ACCESS_TOKEN}" \
            -t "${APIFOX_TEST_SCENE_ID}" \
            -e "${APIFOX_PROD_ENV_ID}" \
            -n 1 \
            -r html,cli \
            --upload-report

      # 确保无论前面成功还是失败都设置outcome，避免outputs丢失
      - name: Mark pass or fail
        id: set-output
        if: ${{ always() }}
        run: |
          if [ "${{ steps.run-tests.outcome }}" == "success" ]; then
            echo "outcome=passed" >> $GITHUB_OUTPUT
          else
            echo "outcome=failed" >> $GITHUB_OUTPUT
          fi
          echo "apifox run-tests outcome: ${{ steps.run-tests.outcome }}"

      - name: Debug apifox outcome
        if: ${{ always() }}
        run: |
          echo "apifox_tests outcome: ${{ steps.set-output.outputs.outcome }}"

  deploy:
    needs: apifox_tests
    if: needs.apifox_tests.outputs.passed == 'passed'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I & sanitize inputs
        shell: bash
        run: |
          set -Eeuo pipefail
          aws sts get-caller-identity
          echo "REGION=$AWS_REGION"
          ECS_CLUSTER_TRIMMED="$(echo -n "${ECS_CLUSTER:-}" | tr -d '[:space:]')"
          ECS_SERVICE_TRIMMED="$(echo -n "${ECS_SERVICE:-}" | tr -d '[:space:]')"
          [[ -n "$ECS_CLUSTER_TRIMMED" ]] || (echo "ECS_CLUSTER is empty"; exit 1)
          [[ -n "$ECS_SERVICE_TRIMMED" ]] || (echo "ECS_SERVICE is empty"; exit 1)
          echo "ECS_CLUSTER=$ECS_CLUSTER_TRIMMED" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE_TRIMMED" >> $GITHUB_ENV
          printf 'ECS_CLUSTER=[%s]\nECS_SERVICE=[%s]\n' "$ECS_CLUSTER_TRIMMED" "$ECS_SERVICE_TRIMMED"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO}" --region "${AWS_REGION}" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "${ECR_REPO}" --region "${AWS_REGION}"

      - name: Build and push image
        shell: bash
        run: |
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
          docker build -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          echo "Pushed ${IMAGE_URI}"

      - name: Update container image in local taskdef.json
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          # 转换Windows换行符为Unix换行符
          sed -i 's/\r$//' taskdef.json
          # 直接更新镜像URI，不进行复杂的清理操作
          jq --arg IMG "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" '
            .containerDefinitions |=
            map(if .name == $NAME then .image = $IMG else . end)
          ' taskdef.json > taskdef.updated.json
          echo "Prepared taskdef.updated.json"
          # 验证生成的JSON文件
          if jq empty taskdef.updated.json 2>/dev/null; then
            echo "✅ JSON validation passed"
          else
            echo "❌ JSON validation failed"
            echo "Debug: First few lines of taskdef.updated.json:"
            head -5 taskdef.updated.json
            exit 1
          fi

      - name: Register new task definition revision
        id: register
        shell: bash
        run: |
          set -Eeuo pipefail
          NEW_TD=$(aws ecs register-task-definition \
            --region "${AWS_REGION}" \
            --cli-input-json file://taskdef.updated.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          test -n "$NEW_TD" || { echo "Register task definition failed"; exit 1; }
          echo "NEW_TD=${NEW_TD}" >> $GITHUB_ENV
          echo "Registered: ${NEW_TD}"

      # - name: Update ECS service to new task definition
      #   shell: bash
      #   run: |
      #     aws ecs update-service \
      #       --region "${AWS_REGION}" \
      #       --cluster "${ECS_CLUSTER}" \
      #       --service "${ECS_SERVICE}" \
      #       --task-definition "${NEW_TD}" \
      #       --force-new-deployment
      - name: Update ECS service to new task definition (lenient deploy)
        shell: bash
        run: |
          aws ecs update-service \
            --region "${AWS_REGION}" \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${NEW_TD}" \
            --deployment-configuration "minimumHealthyPercent=0,maximumPercent=100,deploymentCircuitBreaker={enable=true,rollback=true}" \
            --force-new-deployment

      - name: Wait for service stability
        shell: bash
        run: |
          aws ecs wait services-stable \
            --region "${AWS_REGION}" \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}"
          echo "Service is stable."

      - name: Diagnostics on failure (ECS & tasks)
        if: ${{ failure() || cancelled() || always() }}
        shell: bash
        run: |
          set +e
          echo "---- ECS deployments ----"
          aws ecs describe-services --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --no-cli-pager || true
          echo "---- Running tasks ----"
          TASK_ARNS=$(aws ecs list-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --service-name "$ECS_SERVICE" --desired-status RUNNING --query 'taskArns' --output text 2>/dev/null)
          if [ -n "$TASK_ARNS" ]; then
            aws ecs describe-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --tasks $TASK_ARNS --no-cli-pager || true
          fi
          echo "---- Stopped tasks (last 20) ----"
          STOPPED=$(aws ecs list-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --service-name "$ECS_SERVICE" --desired-status STOPPED --max-results 20 --query 'taskArns' --output text 2>/dev/null)
          if [ -n "$STOPPED" ]; then
            aws ecs describe-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --tasks $STOPPED --no-cli-pager || true
          fi
