name: Deploy to ECS (EC2 + bridge, AccessKey)

on:
  workflow_dispatch:
  push:
    branches: ['main']

env:
  # 建议在仓库 Settings → Variables 里设置以下变量；否则可把值写死到这里
  AWS_REGION: ${{ vars.AWS_REGION }} # 例：us-east-2
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }} # 例：985539760410
  ECR_REPO: ${{ vars.ECR_REPO }} # 例：edge-ems
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }} # 建议直接填成集群 ARN，更稳
  ECS_SERVICE: ${{ vars.ECS_SERVICE }} # 例：EdgeEMS-service-xxxx
  IMAGE_TAG: ${{ github.sha }} # 用 commit SHA 做镜像标签
  CONTAINER_NAME: 'edge-ems' # 任务定义里的容器名（区分大小写）

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod # 如未用 Environments，可删除本行
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 用 Access Key 配置 AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 基础信息与变量自检（避免空格/换行导致找不到资源）
      - name: Who am I & sanitize inputs
        shell: bash
        run: |
          set -Eeuo pipefail
          aws sts get-caller-identity
          echo "REGION=$AWS_REGION"
          ECS_CLUSTER_TRIMMED="$(echo -n "${ECS_CLUSTER:-}" | tr -d '[:space:]')"
          ECS_SERVICE_TRIMMED="$(echo -n "${ECS_SERVICE:-}" | tr -d '[:space:]')"
          [[ -n "$ECS_CLUSTER_TRIMMED" ]] || (echo "ECS_CLUSTER is empty"; exit 1)
          [[ -n "$ECS_SERVICE_TRIMMED" ]] || (echo "ECS_SERVICE is empty"; exit 1)
          echo "ECS_CLUSTER=$ECS_CLUSTER_TRIMMED" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE_TRIMMED" >> $GITHUB_ENV
          printf 'ECS_CLUSTER=[%s]\nECS_SERVICE=[%s]\n' "$ECS_CLUSTER_TRIMMED" "$ECS_SERVICE_TRIMMED"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repo exists
        shell: bash
        run: |
          aws ecr describe-repositories --repository-names "${ECR_REPO}" --region "${AWS_REGION}" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "${ECR_REPO}" --region "${AWS_REGION}"

      - name: Build and push image
        shell: bash
        run: |
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${IMAGE_TAG}"
          docker build -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          echo "Pushed ${IMAGE_URI}"

      - name: Sanitize taskdef.json (strip BOM & comments, validate JSON)
        shell: bash
        run: |
          set -Eeuo pipefail
          test -s taskdef.json || { echo "taskdef.json is missing or empty"; exit 1; }
          perl -0777 -pe 's/^\x{FEFF}//' taskdef.json > t1.json
          perl -0777 -pe 's{/\*.*?\*/}{}gs; s{^\s*//.*$}{}gm' t1.json > t2.json
          jq . t2.json > /dev/null
          mv t2.json taskdef.json
          rm -f t1.json
          echo "Sanitized taskdef.json OK"

      # 使用仓库中的“干净” taskdef.json，只替换镜像，不从线上覆盖下载
      - name: Update container image in local taskdef.json
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          jq --arg IMG "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" '
            .containerDefinitions |=
            map(if .name == $NAME then .image = $IMG else . end)
          ' taskdef.json > taskdef.updated.json
          # 去除任何 null，兼容严格校验
          jq 'del(..|nulls)' taskdef.updated.json > taskdef.clean.json
          mv taskdef.clean.json taskdef.updated.json
          echo "Prepared taskdef.updated.json"

      - name: Register new task definition revision
        id: register
        shell: bash
        run: |
          set -Eeuo pipefail
          NEW_TD=$(aws ecs register-task-definition \
            --region "${AWS_REGION}" \
            --cli-input-json file://taskdef.updated.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          test -n "$NEW_TD" || { echo "Register task definition failed"; exit 1; }
          echo "NEW_TD=${NEW_TD}" >> $GITHUB_ENV
          echo "Registered: ${NEW_TD}"

      - name: Update ECS service to new task definition
        shell: bash
        run: |
          aws ecs update-service \
            --region "${AWS_REGION}" \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --task-definition "${NEW_TD}" \
            --force-new-deployment

      - name: Wait for service stability
        shell: bash
        run: |
          aws ecs wait services-stable \
            --region "${AWS_REGION}" \
            --cluster "${ECS_CLUSTER}" \
            --services "${ECS_SERVICE}"
          echo "Service is stable."

      # 失败时自动取证，便于快速定位（总会执行）
      - name: Diagnostics on failure (ECS & tasks)
        if: ${{ failure() || cancelled() || always() }}
        shell: bash
        run: |
          set +e
          echo "---- ECS deployments ----"
          aws ecs describe-services --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --no-cli-pager || true
          echo "---- Running tasks ----"
          TASK_ARNS=$(aws ecs list-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --service-name "$ECS_SERVICE" --desired-status RUNNING --query 'taskArns' --output text 2>/dev/null)
          if [ -n "$TASK_ARNS" ]; then
            aws ecs describe-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --tasks $TASK_ARNS --no-cli-pager || true
          fi
          echo "---- Stopped tasks (last 20) ----"
          STOPPED=$(aws ecs list-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --service-name "$ECS_SERVICE" --desired-status STOPPED --max-results 20 --query 'taskArns' --output text 2>/dev/null)
          if [ -n "$STOPPED" ]; then
            aws ecs describe-tasks --region "$AWS_REGION" --cluster "$ECS_CLUSTER" --tasks $STOPPED --no-cli-pager || true
          fi
